// CUP specification for a simple expression evaluator (w/ actions)

import java_cup.runtime.*;
import java.lang.Number;

parser code {:

  public void syntax_error(Symbol cur_token) {
    report_error(String.format("Erreur syntaxique @ l:%03d,c:%03d", cur_token.left, cur_token.right), null);
  }

  public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
    report_fatal_error("Impossible de continuer l'analyse !", null);
  }
  
:}

// Terminaux non typés
terminal DEBUT, FIN;
terminal AFFECT;
terminal ENTIER, REEL, BOOLEEN;
terminal COMP_EOF;

// Terminaux typés
terminal String IDENTIFICATEUR;

terminal Integer VAL_ENTIERE;
terminal Double  VAL_REELLE;
terminal Boolean VAL_BOOLEENNE;

// Non terminaux non typés
non terminal prog;
non terminal bloc_succ, bloc_fin;
non terminal decl_succ, decl_fin;

// Non terminaux typés

// Démarrage
start with prog;

prog ::=
      bloc_succ COMP_EOF                           {: System.out.println(String.format("# reduction : bloc_succ EOF")); :}
    | COMP_EOF                                     {: System.out.println(String.format("# reduction : EOF")); :}
    ;

bloc_succ ::= 
      bloc_succ bloc_fin                           {: System.out.println(String.format("# reduction : bloc_succ bloc_fin")); :}
    | bloc_fin                                     {: System.out.println(String.format("# reduction : bloc_fin")); :}
    ;

bloc_fin ::= 
      DEBUT decl_succ FIN                          {: System.out.println(String.format("# reduction : DEBUT decl_succ FIN")); :}
    ;

decl_succ ::= 
      decl_succ decl_fin                           {: System.out.println(String.format("# reduction : decl_succ decl_fin")); :}
    | decl_fin                                     {: System.out.println(String.format("# reduction : decl_fin")); :}
    ;

decl_fin ::= 
      ENTIER  IDENTIFICATEUR:id AFFECT VAL_ENTIERE:val   {: System.out.println(String.format("Déclaration entière   : %s = %d", id, val)); :}
    | REEL    IDENTIFICATEUR:id AFFECT VAL_REELLE:val    {: System.out.println(String.format("Déclaration réelle    : %s = %d", id, val)); :}
    | BOOLEEN IDENTIFICATEUR:id AFFECT VAL_BOOLEENNE:val {: System.out.println(String.format("Déclaration booléenne : %s = %d", id, val)); :}
    ;
